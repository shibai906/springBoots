server:
  port: 8080
#name: 你好
#age: 32
#content: "name:${name},age=${age}"  # 不常用
#
#persion:
#  name: 你好
#  age: 25
spring:
  mvc:
    view:
      prefix: /WEB-INF/views/
      suffix: .jsp
  jpa:
    hibernate:
      ddl-auto: create # create,每次运行该程序，没有表格会新建表格，表内数据会清空  create-drop，每次程序结束时都会清空表    update，每次运行程序，没有表格会新建表格，表内有数据不会清空，只会更新    valiate，运行程序会校验数据与数据库的字段类型是否相同，不同会报错
# 以下是配置单数据源
#  datasource:
#    url: jdbc:mysql://127.0.0.1:3306/test?serverTimezone=GMT%2B8
#    username: root
#    password: 123456
#    driver-class-name: com.mysql.cj.jdbc.Driver

#custom:
#  datasource:
#    names: primary
#    primary:
#      url: jdbc:mysql://127.0.0.1:3306/test?serverTimezone=GMT%2B8
#      username: root
#      password: 123456
#      driver-class: com.mysql.cj.jdbc.Driver
#  datasource.secondray:
#      url: jdbc:mysql://127.0.0.1:3306/tests?serverTimezone=GMT%2B8
#      username: root
#      password: 123456

  datasource:
    #使用druid连接池
    type: com.alibaba.druid.pool.DruidDataSource

# 自定义的主数据源配置信息
test:
  datasource:
    #druid相关配置
    druid:
      #监控统计拦截的filters
      filters: stat
      driverClassName: com.mysql.cj.jdbc.Driver
      #配置基本属性
      url: jdbc:mysql://127.0.0.1:3306/test?serverTimezone=GMT%2B8
      username: root
      password: 123456
      #配置初始化大小/最小/最大
      initialSize: 1
      minIdle: 1
      maxActive: 20
      #获取连接等待超时时间
      maxWait: 60000
      #间隔多久进行一次检测，检测需要关闭的空闲连接
      timeBetweenEvictionRunsMillis: 60000
      #一个连接在池中最小生存的时间
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 'x'
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      #打开PSCache，并指定每个连接上PSCache的大小。oracle设为true，mysql设为false。分库分表较多推荐设置为false
      poolPreparedStatements: false
      maxPoolPreparedStatementPerConnectionSize: 20

# 自定义的从数据源配置信息
test1:
  datasource:
    #druid相关配置
    druid:
      #监控统计拦截的filters
      filters: stat
      driverClassName: com.mysql.cj.jdbc.Driver
      #配置基本属性
      url: jdbc:mysql://127.0.0.1:3306/test1?serverTimezone=GMT%2B8
      username: root
      password: 123456
      #配置初始化大小/最小/最大
      initialSize: 1
      minIdle: 1
      maxActive: 20
      #获取连接等待超时时间
      maxWait: 60000
      #间隔多久进行一次检测，检测需要关闭的空闲连接
      timeBetweenEvictionRunsMillis: 60000
      #一个连接在池中最小生存的时间
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 'x'
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      #打开PSCache，并指定每个连接上PSCache的大小。oracle设为true，mysql设为false。分库分表较多推荐设置为false
      poolPreparedStatements: false
      maxPoolPreparedStatementPerConnectionSize: 20

# 默认情况下，日志文件的大小达到10MB时会切分一次，产生新的日志文件，默认级别为：ERROR、WARN、INFO
# logging.level: 日志级别控制前缀，*为包名或Logger名
# LEVEL：选项TRACE、DEBUG、INFO、WARN、ERROR、FATAL、OFF
# logging.level.com.zhao=DEBUG:com.zhao包下所有class文件是以DEBUG级别输出
# logging.level.root=WARN:root日志以WARN级别输出
# 根据不同的日志系统，可以按如下规则组织配置文件名，就能被正确加载：
# Logback： logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy
# Log4j： log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml
# Log4j2： log4j2-spring.xml, log4j2.xml
# JDK (Java Util Logging)： logging.properties
# 官方推荐优先使用带有-spring的文件名作为你的日志配置。默认命名规则，并且放在src/main/resources下面即可
# 可以通过logging.config属性指定自定义的名称。

# 根节点包含属性
# scan:当此属性设置为true时，配置文件如果发生改变，将会重新加载，默认值为true
# scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当 scan 为 true 时，此属性生效。默认的时间间隔为1分钟
# debug:当此属性设置为 true 时，将打印出 logback 内部日志信息，实时查看 logback 运行状态。默认值为 false


logging:
  config: classpath:logback-spring.xml
  path: D:/logs/springBoots

#debug: true
#logging:
#  level:
#    root: debug
#  path: D:/logs/springBoots/  # 如果只配置logging.path,在/var/log文件夹下生成spring.log
#  file: D:/logs/springBoots/springboot.log      # 这边既可以是相对路径，也可以是绝对路径，如果只配这个，只会在当前路径下生成xxx.log日志文件。



